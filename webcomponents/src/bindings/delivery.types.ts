/* This file is generated by zits. Do not edit manually */

import {
/** types.ts */
HoloHash,
AgentPubKey,
DnaHash,
WasmHash,
EntryHash,
ActionHash,
AnyDhtHash,
ExternalHash,
KitsuneAgent,
KitsuneSpace,
HoloHashB64,
AgentPubKeyB64,
DnaHashB64,
WasmHashB64,
EntryHashB64,
ActionHashB64,
AnyDhtHashB64,
InstalledAppId,
Signature,
CellId,
DnaProperties,
RoleName,
InstalledCell,
Timestamp,
Duration,
HoloHashed,
NetworkInfo,
FetchPoolInfo,
/** hdk/action.ts */
SignedActionHashed,
ActionHashed,
ActionType,
Action,
NewEntryAction,
Dna,
AgentValidationPkg,
InitZomesComplete,
CreateLink,
DeleteLink,
OpenChain,
CloseChain,
Update,
Delete,
Create,
/** hdk/capabilities.ts */
CapSecret,
CapClaim,
GrantedFunctionsType,
GrantedFunctions,
ZomeCallCapGrant,
CapAccess,
CapGrant,
///** hdk/countersigning.ts */
//CounterSigningSessionData,
//PreflightRequest,
//CounterSigningSessionTimes,
//ActionBase,
//CounterSigningAgents,
//PreflightBytes,
//Role,
//CountersigningAgentState,
/** hdk/dht-ops.ts */
DhtOpType,
DhtOp,
getDhtOpType,
getDhtOpAction,
getDhtOpEntry,
getDhtOpSignature,
/** hdk/entry.ts */
EntryVisibility,
AppEntryDef,
EntryType,
EntryContent,
Entry,
/** hdk/record.ts */
Record as HcRecord,
RecordEntry as HcRecordEntry,
/** api/admin/types.ts */
InstalledAppInfoStatus,
DeactivationReason,
DisabledAppReason,
StemCell,
ProvisionedCell,
ClonedCell,
CellType,
CellInfo,
AppInfo,
MembraneProof,
FunctionName,
ZomeName,
ZomeDefinition,
IntegrityZome,
CoordinatorZome,
DnaDefinition,
ResourceBytes,
ResourceMap,
CellProvisioningStrategy,
CellProvisioning,
DnaVersionSpec,
DnaVersionFlexible,
AppRoleDnaManifest,
AppRoleManifest,
AppManifest,
AppBundle,
AppBundleSource,
NetworkSeed,
ZomeLocation,
   } from '@holochain/client';

import {
/** Common */
DhtOpHashB64,
DhtOpHash,
/** DnaFile */
DnaFile,
DnaDef,
Zomes,
WasmCode,
/** entry-details */
EntryDetails,
RecordDetails,
Details,
DetailsType,
EntryDhtStatus,
/** Validation */
ValidationStatus,
ValidationReceipt,
   } from '@holochain-open-dev/core-types';

/** User defined external dependencies */
import {Link} from './deps.types';

export const REMOTE_ENDPOINT = "receive_delivery_dm";

export const DIRECT_SEND_TIMEOUT_MS = 1000;

export const DIRECT_SEND_CHUNK_TIMEOUT_MS = 10000;

export const CHUNK_MAX_SIZE = 200 * 1024;

export const PARCEL_MAX_SIZE = 10 * 1024 * 1024;

export const NAME_MIN_LENGTH = 2;

/** Listing all Holochain Path used in this DNA */
export const DIRECTORY_PATH = "directory";

/** State of a single delivery of a mail or ack to a unique recipient */
export type DeliveryState =
  | {Unsent: null} | {PendingNotice: null} | {NoticeDelivered: null} | {ParcelRefused: null} | {ParcelAccepted: null} | {PendingParcel: null} | {ParcelDelivered: null};
export enum DeliveryStateType {
	Unsent = 'Unsent',
	PendingNotice = 'PendingNotice',
	NoticeDelivered = 'NoticeDelivered',
	ParcelRefused = 'ParcelRefused',
	ParcelAccepted = 'ParcelAccepted',
	PendingParcel = 'PendingParcel',
	ParcelDelivered = 'ParcelDelivered',
}

/** Possible states of an OutMail entry */
export type DistributionState =
  | {Unsent: null} | {AllNoticesSent: null} | {AllNoticeReceived: null} | {AllRepliesReceived: null} | {AllAcceptedParcelsReceived: null} | {Deleted: null};
export enum DistributionStateType {
	Unsent = 'Unsent',
	AllNoticesSent = 'AllNoticesSent',
	AllNoticeReceived = 'AllNoticeReceived',
	AllRepliesReceived = 'AllRepliesReceived',
	AllAcceptedParcelsReceived = 'AllAcceptedParcelsReceived',
	Deleted = 'Deleted',
}

/** Possible states of a DeliveryNotice entry */
export type NoticeState =
  | {Unreplied: null} | {Accepted: null} | {Refused: null} | {Received: null} | {Deleted: null};
export enum NoticeStateType {
	Unreplied = 'Unreplied',
	Accepted = 'Accepted',
	Refused = 'Refused',
	Received = 'Received',
	Deleted = 'Deleted',
}

/** Shared data between a Distribution and a DeliveryNotice */
export interface DeliverySummary {
  distribution_strategy: DistributionStrategy
  parcel_size: number
  parcel_reference: ParcelReference
}

/** A Parcel is a generic Entry or a ParcelManifest */
export enum ParcelReferenceType {
	AppEntry = 'AppEntry',
	Manifest = 'Manifest',
}
export type ParcelReference = unknown

/**  */
export type DistributionStrategy =
  | {NORMAL: null} | {DM_ONLY: null} | {DHT_ONLY: null};
export enum DistributionStrategyType {
	Normal = 'Normal',
	DmOnly = 'DmOnly',
	DhtOnly = 'DhtOnly',
}

/** Entry representing a received Manifest */
export interface DeliveryNotice {
  distribution_eh: EntryHash
  summary: DeliverySummary
  sender: AgentPubKey
  sender_summary_signature: Signature
}

/** Entry for confirming a delivery has been well received or refused by a recipient */
export interface DeliveryReceipt {
  distribution_eh: EntryHash
  recipient: AgentPubKey
  recipient_signature: Signature
}

/** Entry for confirming a delivery has been well received or refused by a recipient */
export interface DeliveryReply {
  notice_eh: EntryHash
  has_accepted: boolean
}

/** Entry representing a request to send a Parcel to one or multiple recipients */
export interface Distribution {
  recipients: AgentPubKey[]
  delivery_summary: DeliverySummary
  summary_signature: Signature
}

/** Entry for confirming a manifest has been well received by a recipient */
export interface NoticeReceived {
  distribution_eh: EntryHash
  recipient: AgentPubKey
  recipient_manifest_signature: Signature
  date_of_reception: number
}

/** Entry representing a file chunk. */
export interface ParcelChunk {
  data: string
}

/** WARN : Change MANIFEST_ENTRY_NAME const when renaming */
export interface ParcelManifest {
  name: string
  custum_entry_type: string
  size: number
  chunks: EntryHash[]
}

/**
 * Entry for confirming a delivery has been well received or refused by a recipient
 * TODO: This should be a private link instead of an entry
 */
export interface ParcelReceived {
  notice_eh: EntryHash
  parcel_eh: EntryHash
}

/** List of structs that PendingItem can embed */
export type ItemKind =
  | {DeliveryReply: null} | {ParcelReceived: null} | {DeliveryNotice: null} | {AppEntryBytes: null} | {ParcelChunk: null};
export enum ItemKindType {
	DeliveryReply = 'DeliveryReply',
	ParcelReceived = 'ParcelReceived',
	DeliveryNotice = 'DeliveryNotice',
	AppEntryBytes = 'AppEntryBytes',
	ParcelChunk = 'ParcelChunk',
}

/**
 * A Public Entry representing an encrypted private Entry on the DHT
 * waiting to be received by some recipient.
 * The Entry is encrypted with the recipient's public encryption key.
 * The recipient is the agentId where the entry is linked from.
 */
export interface PendingItem {
  kind: ItemKind
  author: AgentPubKey
  author_signature: Signature
  encrypted_data: unknown
  distribution_eh: EntryHash
}

/** Entry for confirming a delivery has been well received or refused by a recipient */
export interface ReplyReceived {
  distribution_eh: EntryHash
  recipient: AgentPubKey
  has_accepted: boolean
  recipient_signature: Signature
}

export interface DistributeParcelInput {
  recipients: AgentPubKey[]
  strategy: DistributionStrategy
  parcel_ref: ParcelReference
}

export interface RespondToNoticeInput {
  notice_eh: EntryHash
  has_accepted: boolean
}

export interface FetchChunkInput {
  chunk_eh: EntryHash
  notice_eh: EntryHash
}

export interface GetNoticeOutput {
  notice: DeliveryNotice
  state: NoticeState
}

export enum DeliveryNoticeQueryFieldType {
	Sender = 'Sender',
	Distribution = 'Distribution',
	Parcel = 'Parcel',
}
export type DeliveryNoticeQueryFieldVariantSender = {Sender: AgentPubKey}
export type DeliveryNoticeQueryFieldVariantDistribution = {Distribution: EntryHash}
export type DeliveryNoticeQueryFieldVariantParcel = {Parcel: EntryHash}
export type DeliveryNoticeQueryField = 
 | DeliveryNoticeQueryFieldVariantSender | DeliveryNoticeQueryFieldVariantDistribution | DeliveryNoticeQueryFieldVariantParcel;

export enum ParcelReceivedQueryFieldType {
	Notice = 'Notice',
	Parcel = 'Parcel',
}
export type ParcelReceivedQueryFieldVariantNotice = {Notice: EntryHash}
export type ParcelReceivedQueryFieldVariantParcel = {Parcel: EntryHash}
export type ParcelReceivedQueryField = 
 | ParcelReceivedQueryFieldVariantNotice | ParcelReceivedQueryFieldVariantParcel;

export enum NoticeReceivedQueryFieldType {
	Recipient = 'Recipient',
	Distribution = 'Distribution',
}
export type NoticeReceivedQueryFieldVariantRecipient = {Recipient: AgentPubKey}
export type NoticeReceivedQueryFieldVariantDistribution = {Distribution: EntryHash}
export type NoticeReceivedQueryField = 
 | NoticeReceivedQueryFieldVariantRecipient | NoticeReceivedQueryFieldVariantDistribution;

/**
 * ----------------------------------------------------------------------------------------
 * API
 */
export const DELIVERY_ZOME_NAME = "zDelivery";

/** List of all Link kinds handled by this Zome */
export type LinkTypes =
  | {EncKey: null} | {Members: null} | {Inbox: null} | {Pendings: null};
export enum LinkTypesType {
	EncKey = 'EncKey',
	Members = 'Members',
	Inbox = 'Inbox',
	Pendings = 'Pendings',
}

export enum DeliveryEntryType {
	PubEncKey = 'PubEncKey',
	DeliveryNotice = 'DeliveryNotice',
	DeliveryReceipt = 'DeliveryReceipt',
	DeliveryReply = 'DeliveryReply',
	Distribution = 'Distribution',
	ParcelChunk = 'ParcelChunk',
	ParcelManifest = 'ParcelManifest',
	ParcelReceived = 'ParcelReceived',
	NoticeReceived = 'NoticeReceived',
	PendingItem = 'PendingItem',
	ReplyReceived = 'ReplyReceived',
}
export type DeliveryEntryVariantPubEncKey = {PubEncKey: PubEncKey}
export type DeliveryEntryVariantDeliveryNotice = {DeliveryNotice: DeliveryNotice}
export type DeliveryEntryVariantDeliveryReceipt = {DeliveryReceipt: DeliveryReceipt}
export type DeliveryEntryVariantDeliveryReply = {DeliveryReply: DeliveryReply}
export type DeliveryEntryVariantDistribution = {Distribution: Distribution}
export type DeliveryEntryVariantParcelChunk = {ParcelChunk: ParcelChunk}
export type DeliveryEntryVariantParcelManifest = {ParcelManifest: ParcelManifest}
export type DeliveryEntryVariantParcelReceived = {ParcelReceived: ParcelReceived}
export type DeliveryEntryVariantNoticeReceived = {NoticeReceived: NoticeReceived}
export type DeliveryEntryVariantPendingItem = {PendingItem: PendingItem}
export type DeliveryEntryVariantReplyReceived = {ReplyReceived: ReplyReceived}
export type DeliveryEntry = 
 | DeliveryEntryVariantPubEncKey | DeliveryEntryVariantDeliveryNotice | DeliveryEntryVariantDeliveryReceipt | DeliveryEntryVariantDeliveryReply | DeliveryEntryVariantDistribution | DeliveryEntryVariantParcelChunk | DeliveryEntryVariantParcelManifest | DeliveryEntryVariantParcelReceived | DeliveryEntryVariantNoticeReceived | DeliveryEntryVariantPendingItem | DeliveryEntryVariantReplyReceived;

/** Entry representing the Public Encryption Key of an Agent */
export interface PubEncKey {
  value: Uint8Array
}

/**  */
export interface DirectMessage {
  from: AgentPubKey
  msg: DeliveryProtocol
}

export enum DeliveryProtocolType {
	Failure = 'Failure',
	Success = 'Success',
	Item = 'Item',
	ParcelRequest = 'ParcelRequest',
	ParcelResponse = 'ParcelResponse',
	ChunkRequest = 'ChunkRequest',
	ChunkResponse = 'ChunkResponse',
	Ping = 'Ping',
	Pong = 'Pong',
}
export type DeliveryProtocolVariantFailure = {Failure: string}
export type DeliveryProtocolVariantSuccess = {Success: null}
export type DeliveryProtocolVariantItem = {Item: PendingItem}
export type DeliveryProtocolVariantParcelRequest = {ParcelRequest: EntryHash}
export type DeliveryProtocolVariantParcelResponse = {ParcelResponse: Entry}
export type DeliveryProtocolVariantChunkRequest = {ChunkRequest: EntryHash}
export type DeliveryProtocolVariantChunkResponse = {ChunkResponse: ParcelChunk}
export type DeliveryProtocolVariantPing = {Ping: null}
export type DeliveryProtocolVariantPong = {Pong: null}
export type DeliveryProtocol = 
 | DeliveryProtocolVariantFailure | DeliveryProtocolVariantSuccess | DeliveryProtocolVariantItem | DeliveryProtocolVariantParcelRequest | DeliveryProtocolVariantParcelResponse | DeliveryProtocolVariantChunkRequest | DeliveryProtocolVariantChunkResponse | DeliveryProtocolVariantPing | DeliveryProtocolVariantPong;

export interface CommitPendingItemInput {
  item: PendingItem
  recipient: AgentPubKey
}

export type SignalKind =
  | {ReceivedNotice: null} | {ReceivedReply: null} | {ReceivedParcel: null} | {ReceivedReceipt: null};
export enum SignalKindType {
	ReceivedNotice = 'ReceivedNotice',
	ReceivedReply = 'ReceivedReply',
	ReceivedParcel = 'ReceivedParcel',
	ReceivedReceipt = 'ReceivedReceipt',
}

export enum SignalProtocolType {
	ReceivedNotice = 'ReceivedNotice',
	ReceivedReply = 'ReceivedReply',
	ReceivedParcel = 'ReceivedParcel',
	ReceivedReceipt = 'ReceivedReceipt',
}
export type SignalProtocolVariantReceivedNotice = {ReceivedNotice: DeliveryNotice}
export type SignalProtocolVariantReceivedReply = {ReceivedReply: ReplyReceived}
export type SignalProtocolVariantReceivedParcel = {ReceivedParcel: ParcelReceived}
export type SignalProtocolVariantReceivedReceipt = {ReceivedReceipt: DeliveryReceipt}
export type SignalProtocol = 
 | SignalProtocolVariantReceivedNotice | SignalProtocolVariantReceivedReply | SignalProtocolVariantReceivedParcel | SignalProtocolVariantReceivedReceipt;

export const COMMIT_PARCEL_CALLBACK_NAME = "commit_parcel";

export interface CommitParcelInput {
  zome_index: number
  entry_index: number
  entry_visibility: EntryVisibility
  entry: Entry
  maybe_link_ah?: ActionHash
}
